datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  password       String
  role           Role     @default(STUDENT)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  courses        Course[]
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  enrollments    Enrollment[]
  sentMessages   Message[]  @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  ptmBookings    PTMBooking[] @relation("StudentBookings")
  teacherBookings PTMBooking[] @relation("TeacherBookings")
}

model Course {
  id           String   @id @default(cuid())
  title        String
  description  String?
  instructor   User     @relation(fields: [instructorId], references: [id])
  instructorId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  price        Float    @default(0)
  enrollments  Enrollment[]
  groupAssignments GroupAssignment[]
}

model Subscription {
  id          String   @id @default(cuid())
  name        String
  price       Float
  description String?
  features    String
  users       User[]
}

model Enrollment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime @default(now())
  @@unique([userId, courseId])
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
  PARENT
}

model Message {
  id        String   @id @default(cuid())
  content   String
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  String
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
}

model PTMBooking {
  id          String   @id @default(cuid())
  student     User     @relation("StudentBookings", fields: [studentId], references: [id])
  studentId   String
  teacher     User     @relation("TeacherBookings", fields: [teacherId], references: [id])
  teacherId   String
  dateTime    DateTime
  status      PTMStatus @default(PENDING)
  notes       String?
  createdAt   DateTime @default(now())
}

model GroupAssignment {
  id          String   @id @default(cuid())
  title       String
  description String?
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
  dueDate     DateTime
  createdAt   DateTime @default(now())
  members     GroupMember[]
}

model GroupMember {
  id                String   @id @default(cuid())
  userId            String
  groupAssignmentId String
  groupAssignment   GroupAssignment @relation(fields: [groupAssignmentId], references: [id])
  role              GroupRole @default(MEMBER)
  joinedAt          DateTime @default(now())
  @@unique([userId, groupAssignmentId])
}

enum PTMStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum GroupRole {
  LEADER
  MEMBER
}

