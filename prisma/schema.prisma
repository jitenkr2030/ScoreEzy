datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
  PARENT
}

enum PTMStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum GroupRole {
  LEADER
  MEMBER
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  password       String
  role           Role     @default(STUDENT)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  courses        Course[]
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  enrollments    Enrollment[]
  sentMessages   Message[]  @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  ptmBookings    PTMBooking[] @relation("StudentBookings")
  teacherBookings PTMBooking[] @relation("TeacherBookings")
  notifications  Notification[]
  progress       UserProgress[]
  submissions    Submission[]
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  subject     String
  level       String
  tags        String[]
  instructorId String
  instructor  User     @relation(fields: [instructorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  price       Float    @default(0)
  enrollments Enrollment[]
  assignments Assignment[]
  rubrics     Rubric[]
}

model Subscription {
  id          String   @id @default(cuid())
  name        String
  price       Float
  description String?
  features    String
  users       User[]
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
}

model Message {
  id          String   @id @default(cuid())
  content     String
  senderId    String
  receiverId  String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)
}

model PTMBooking {
  id        String    @id @default(cuid())
  studentId String
  teacherId String
  student   User      @relation("StudentBookings", fields: [studentId], references: [id])
  teacher   User      @relation("TeacherBookings", fields: [teacherId], references: [id])
  dateTime  DateTime
  status    PTMStatus @default(PENDING)
  notes     String?
  createdAt DateTime  @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String   @default("info")
  title     String
  message   String
  isRead    Boolean  @default(false)
  archived  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model UserProgress {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  moduleId  String
  progress  Float    @default(0)
  lastAccessed DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GradingCriteria {
  id           String   @id @default(cuid())
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  name         String
  description  String   @default("")
  weight       Float
  points       Float    @default(0)
  levels       Json     @default("[]")
  rubric       String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  rubricId     String?
  rubricModel  Rubric?   @relation(fields: [rubricId], references: [id])
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String?
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  dueDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  submissions Submission[]
  criteria    GradingCriteria[]
}

model Submission {
  id           String   @id @default(cuid())
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  content      String
  score        Float?
  feedback     String?
  submittedAt  DateTime @default(now())
  gradedAt     DateTime?
  gradingResults GradingResult[]
}

model GradingResult {
  id             String   @id @default(cuid())
  submissionId   String
  submission     Submission @relation(fields: [submissionId], references: [id])
  score          Float
  feedback       String
  criteriaScores Json
  gradedAt       DateTime @default(now())
}

model Rubric {
  id          String   @id @default(cuid())
  name        String
  description String?
  criteria    GradingCriteria[]
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

